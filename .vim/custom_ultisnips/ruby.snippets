snippet rin "raise(<object>.inspect)" !b
raise($1.inspect)
endsnippet


# Override default
snippet "\b(de)?f" "def <name>..." r!
def ${1:function_name}${2:(${3:*args})}
	${0:# TODO}
end
endsnippet


snippet defs "def self.<name>..." !b
def self.${1:function_name}${2:(${3:*args})}
	${0:# TODO}
end
endsnippet




###########
#  RSpec  #
###########

snippet de "describe '' do" !b
describe '$1' do
endsnippet


snippet des "describe '' do end" !b
describe '$1' do
  $0
end
endsnippet


snippet it "it should '' do" !b
it "should $1" do
  $0
end
endsnippet


snippet itv "it validation specs" b
it "should ensure $1 when validating" do
  ${VISUAL}.expects(:$2)
  ${VISUAL}.valid?
end

it "should add an error if $3" do
  ${0:# TODO}
  ${VISUAL}.send(:$2)
  ${VISUAL}.errors[:base].should include('')
end

it "should ensure $1" do
  # TODO
  ${VISUAL}.send(:$2)
  ${VISUAL}.errors.should be_empty
end
endsnippet


snippet itbv "it before validation specs" b
it "should $1 before validating" do
  ${VISUAL}.expects(:$2)
  ${VISUAL}.valid?
end

it "should $1" do
  ${0:# TODO}
  ${VISUAL}.send(:$2)
end
endsnippet


snippet itas "it after save specs" b
it "should $1 after saving" do
  ${VISUAL}.expects(:$2)
  ${VISUAL}.save
end

it "should $1" do
  ${0:# TODO}
  ${VISUAL}.send(:$2)
end
endsnippet


snippet .t "times(#)" i
.times(${1:2})
endsnippet
